#####################
# Protocol Entities #
#####################

"""
Protocol contains the Aave Pools
"""
type Protocol @entity {
  id: ID!
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

"""
A Pool represents a group of reserves that can be used to borrow and lend against each others.
For example, Aave Ethereum has two Pools. The normal Pool and the AMM Pool.
"""
type Pool @entity {
  id: ID! # TODO - dk Jan 13th - I can likely remove some of the extra info on the reserve
  protocol: Protocol!
  lendingPool: Bytes
  lendingPoolCollateralManager: Bytes
  lendingPoolConfiguratorImpl: Bytes
  lendingPoolImpl: Bytes
  lendingPoolConfigurator: Bytes
  proxyPriceProvider: Bytes
  lendingRateOracle: Bytes
  configurationAdmin: Bytes
  ethereumAddress: Bytes
  emergencyAdmin: Bytes
  lastUpdateTimestamp: Int!

  reserves: [Reserve!]! @derivedFrom(field: "pool")
  depositHistory: [Deposit!]! @derivedFrom(field: "pool")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "pool")
  borrowHistory: [Borrow!]! @derivedFrom(field: "pool")
  # usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "pool")
  # rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "pool")
  repayHistory: [Repay!]! @derivedFrom(field: "pool")
  # flashLoanHistory: [FlashLoan!]! @derivedFrom(field: "pool")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "pool")

  active: Boolean!
  paused: Boolean!
}

"""
A Reserve is a contract that represents 1 underlying token for all a/v/s tokens in a single pool
"""
type Reserve @entity {
  "Reserve Address"
  id: ID! # TODO - dk Jan 13th - I can likely remove a lot of extra info on the reserve
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  decimals: Int!
  # usageAsCollateralEnabled: Boolean! # defalt false
  borrowingEnabled: Boolean! # defalt false
  stableBorrowRateEnabled: Boolean! # defalt false
  isActive: Boolean! # defalt false
  isFrozen: Boolean! # defalt false
  reserveInterestRateStrategy: Bytes!
  optimalUtilisationRate: BigInt!
  variableRateSlope1: BigInt!
  variableRateSlope2: BigInt!
  stableRateSlope1: BigInt!
  stableRateSlope2: BigInt!
  baseVariableBorrowRate: BigInt!
  baseLTVasCollateral: BigInt!
  reserveLiquidationThreshold: BigInt!
  reserveLiquidationBonus: BigInt!
  utilizationRate: BigDecimal! # default: 0
  totalLiquidity: BigInt! # default: 0
  totalATokenSupply: BigInt!
  totalLiquidityAsCollateral: BigInt! # default: 0
  availableLiquidity: BigInt! # default: 0
  totalPrincipalStableDebt: BigInt! # default: 0
  totalScaledVariableDebt: BigInt! # default: 0
  totalCurrentVariableDebt: BigInt! # default: 0
  totalDeposits: BigInt! # default: 0
  liquidityRate: BigInt! # depositors interest
  averageStableRate: BigInt!
  variableBorrowRate: BigInt!
  stableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!
  aToken: AToken!
  vToken: VToken!
  sToken: SToken!
  reserveFactor: BigInt! #default 0
  lastUpdateTimestamp: Int!
  stableDebtLastUpdateTimestamp: Int!

  lifetimeLiquidity: BigInt! # default: 0
  lifetimePrincipalStableDebt: BigInt! # default: 0
  lifetimeScaledVariableDebt: BigInt! # default: 0
  lifetimeCurrentVariableDebt: BigInt! # default: 0
  lifetimeRepayments: BigInt! # default: 0
  lifetimeWithdrawals: BigInt! # default: 0
  lifetimeBorrows: BigInt! # default: 0
  lifetimeLiquidated: BigInt! # default: 0
  lifetimeFlashLoans: BigInt! # default: 0
  lifetimeFlashLoanPremium: BigInt! # default: 0
  lifetimeDepositorsInterestEarned: BigInt!
  lifetimeReserveFactorAccrued: BigInt!
  # lifetimeStableDebFeeCollected: BigInt!
  # lifetimeVariableDebtFeeCollected: BigInt!
  userReserves: [UserReserve!]! @derivedFrom(field: "reserve")
  depositHistory: [Deposit!]! @derivedFrom(field: "reserve")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "reserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "reserve")
  # usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "reserve")
  # rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "reserve")
  repayHistory: [Repay!]! @derivedFrom(field: "reserve")
  # flashLoanHistory: [FlashLoan!]! @derivedFrom(field: "reserve")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "collateralReserve")
  deposits: [Deposit!]! @derivedFrom(field: "reserve")
}

"""
User entity which is linked to all actions, and historical status of the user. As well as incentives.
"""
type User @entity {
  "user address"
  id: ID!
  borrowedReservesCount: Int!

  #incentives
  unclaimedRewards: BigInt!
  lifetimeRewards: BigInt!
  incentivesLastUpdated: Int!

  reserves: [UserReserve!]! @derivedFrom(field: "user")
  depositHistory: [Deposit!]! @derivedFrom(field: "user")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "user")
  # usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "user")
  borrowHistory: [Borrow!]! @derivedFrom(field: "user")
  # rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "user")
  repayHistory: [Repay!]! @derivedFrom(field: "user")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "user")
  incentivizedActions: [IncentivizedAction!]! @derivedFrom(field: "user")
  claimIncentives: [ClaimIncentiveCall!]! @derivedFrom(field: "user")

  depositCount: Int!
  redeemUnderlyingCount: Int!
  borrowCount: Int!
  repayCount: Int!
  liquidationCallCount: Int!
  incentivizedActionsCount: Int!
  claimIncentivesCount: Int!
}

"""
UserReserve represents a users debts and assets in a single reserve
"""
type UserReserve @entity {
  "user address + reserve address"
  id: ID!
  pool: Pool!
  reserve: Reserve!
  user: User!
  # usageAsCollateralEnabledOnUser: Boolean!
  scaledATokenBalance: BigInt!
  currentATokenBalance: BigInt!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  principalStableDebt: BigInt!
  currentStableDebt: BigInt!
  currentTotalDebt: BigInt!
  stableBorrowRate: BigInt!
  oldStableBorrowRate: BigInt!
  liquidityRate: BigInt!
  stableBorrowLastUpdateTimestamp: Int!
  variableBorrowIndex: BigInt!
  lastUpdateTimestamp: Int!

  stableTokenDelegatedAllowances: [StableTokenDelegatedAllowance!]!
    @derivedFrom(field: "userReserve")
  variableTokenDelegatedAllowances: [VariableTokenDelegatedAllowance!]!
    @derivedFrom(field: "userReserve")
  aTokenBalanceHistory: [ATokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")
  vTokenBalanceHistory: [VTokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")
  sTokenBalanceHistory: [STokenBalanceHistoryItem!]! @derivedFrom(field: "userReserve")

  # usageAsCollateralHistory: [UsageAsCollateral!]! @derivedFrom(field: "userReserve")
  depositHistory: [Deposit!]! @derivedFrom(field: "userReserve")
  redeemUnderlyingHistory: [RedeemUnderlying!]! @derivedFrom(field: "userReserve")
  borrowHistory: [Borrow!]! @derivedFrom(field: "userReserve")
  # rebalanceStableBorrowRateHistory: [RebalanceStableBorrowRate!]! @derivedFrom(field: "userReserve")
  repayHistory: [Repay!]! @derivedFrom(field: "userReserve")
  liquidationCallHistory: [LiquidationCall!]! @derivedFrom(field: "collateralUserReserve")
}

"""
Maps Proxy address to Pool
"""
type ContractToPoolMapping @entity {
  id: ID!
  pool: Pool!
}

"""
Maps a/v/s token addresses to their pools and underlying asset IDs
"""
type MapAssetPool @entity {
  id: ID!
  pool: String!
  underlyingAsset: Bytes!
}

"""
The incentives controller is setup to work with stkAAVE. There is currently only one controller for
all a/v/s tokens.
"""
type IncentivesController @entity {
  "address of the incentives controller"
  id: ID!
  rewardToken: Bytes!
  rewardTokenDecimals: Int!
  rewardTokenSymbol: String!
  precision: Int!
  emissionEndTimestamp: Int!
  incentivizedActions: [IncentivizedAction!]! @derivedFrom(field: "incentivesController")
  claimIncentives: [ClaimIncentiveCall!]! @derivedFrom(field: "incentivesController")
}

##########
# Tokens # TODO - I might just move these into the reserves. I don't really have a use for a unique entity here.
##########

"""
An SToken contract that is deployed
"""
type SToken @entity {
  "SToken address"
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  tokenContractImpl: Bytes!
}

"""
A VToken contract that is deployed
"""
type VToken @entity {
  "VToken address"
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  tokenContractImpl: Bytes!
}

"""
An AToken contract that is deployed
"""
type AToken @entity {
  "AToken address"
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  tokenContractImpl: Bytes!
}

"""
A VariableDebtToken contract that is deployed
"""
type VariableDebtToken @entity {
  "VariableDebtToken address"
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

"""
A StableDebtToken contract that is deployed
"""
type StableDebtToken @entity {
  "StableDebtToken address"
  id: ID!
  pool: Pool!
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
}

###########
# Actions #
###########

"""
Created when a user ACCRUES rewards. Only action that happens today
"""
type IncentivizedAction @entity {
  "txHash"
  id: ID!
  incentivesController: IncentivesController!
  user: User!
  amount: BigInt!
}

"""
Created when a user CLAIMS rewards
"""
type ClaimIncentiveCall @entity {
  "txHash"
  id: ID!
  incentivesController: IncentivesController!
  user: User!
  amount: BigInt!
}

#######################
# Historical Balances # TODO - DK - Maybe make them explicit on what was paid up or down, rather than the amount. Jan 12th 2022
#######################             This makes it more in line with what we are building. I think aave built it with a chart in mind
#                                   It is a bit more in line with the way IncentivizedAction and ClaimIncentiveCall work
"""
Balance History
"""
type ATokenBalanceHistoryItem @entity {
  "userReserve + txHash"
  id: ID!
  userReserve: UserReserve!
  timestamp: Int!
  scaledATokenBalance: BigInt!
  currentATokenBalance: BigInt!
  index: BigInt!
}

"""
Balance History
"""
type VTokenBalanceHistoryItem @entity {
  "userReserve + txHash"
  id: ID!
  userReserve: UserReserve!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  timestamp: Int!
  index: BigInt!
}

"""
Balance History
"""
type STokenBalanceHistoryItem @entity {
  "userReserve + txHash"
  id: ID!
  userReserve: UserReserve!
  principalStableDebt: BigInt!
  currentStableDebt: BigInt!
  timestamp: Int!
  avgStableBorrowRate: BigInt!
}

"""
Debt allowance given from one user to another
"""
type StableTokenDelegatedAllowance @entity {
  "stable + fromUser address + toUser address+ reserve address"
  id: ID!
  fromUser: User!
  toUser: User!
  amountAllowed: BigInt!
  userReserve: UserReserve!
}

"""
Debt allowance given from one user to another
"""
type VariableTokenDelegatedAllowance @entity {
  "variable + fromuser address + touser address+ reserve address"
  id: ID!
  fromUser: User!
  toUser: User!
  amountAllowed: BigInt!
  userReserve: UserReserve!
}

#####################
# User Transactions #
#####################

"""
Basic interface for User Protocol Transactions
"""
interface UserTransaction {
  id: ID!
  pool: Pool!
  user: User!
  timestamp: Int!
}

"""
Deposit Transaction data
"""
type Deposit implements UserTransaction @entity {
  "tx hash"
  id: ID!
  pool: Pool!
  user: User!
  onBehalfOf: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
}

# TODO: check nomenclature for new v2
"""
Redeem Underlying Transaction Data
"""
type RedeemUnderlying implements UserTransaction @entity {
  "tx hash"
  id: ID!
  pool: Pool!
  user: User!
  onBehalfOf: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
}

"""
A user must borrow from a reserve in either stable or variable mode.
"""
enum BorrowRateMode {
  None
  Stable
  Variable
}

"""
Borrow Transaction data
"""
type Borrow implements UserTransaction @entity {
  "tx hash"
  id: ID!
  pool: Pool!
  user: User!
  onBehalfOf: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  borrowRate: BigInt!
  borrowRateMode: BorrowRateMode!
  timestamp: Int!
  stableTokenDebt: BigInt!
  variableTokenDebt: BigInt!
}

# TODO - DK - Jan 12th 2022 - Not really clear this would be very useful. But it could be. Keeping for now
#        DK - Jan 13th 2022 - NOT IN MVP, COMMENTED OUT
# """
# Transaction data
# """
# type UsageAsCollateral implements UserTransaction @entity {
#   "tx hash"
#   id: ID!
#   pool: Pool!
#   user: User!
#   reserve: Reserve!
#   userReserve: UserReserve!
#   fromState: Boolean!
#   toState: Boolean!
#   timestamp: Int!
# }

# TODO - DK - Jan 12th 2022. Pretty rare that this would happen. And likely I can remove it in the near future
#        DK - Jan 13th 2022 - NOT IN MVP, COMMENTED OUT
# """
# Transaction data
# """
# type RebalanceStableBorrowRate implements UserTransaction @entity {
#   "tx hash"
#   id: ID!
#   pool: Pool!
#   user: User!
#   reserve: Reserve!
#   userReserve: UserReserve!
#   borrowRateFrom: BigInt!
#   borrowRateTo: BigInt!
#   #accruedBorrowInterest: BigInt!
#   timestamp: Int!
# }

"""
Transaction data
"""
type Repay implements UserTransaction @entity {
  "tx hash"
  id: ID!
  pool: Pool!
  user: User!
  onBehalfOf: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
}

"""
Transaction data
"""
type LiquidationCall implements UserTransaction @entity {
  "tx hash"
  id: ID!
  pool: Pool!
  user: User!
  collateralReserve: Reserve!
  collateralUserReserve: UserReserve!
  collateralAmount: BigInt!
  principalReserve: Reserve!
  principalUserReserve: UserReserve!
  principalAmount: BigInt!
  liquidator: Bytes!
  timestamp: Int!
}

# TODO - DK - Jan 12th 2022 - Can we configure this to be used in a different way? such as, giving a score to a flash loan?
#                             Or should I just remove flashloans altogether?
#        DK - Jan 13th 2022 - NOT IN MVP, COMMENTED OUT
# """
# Transaction data
# """
# type FlashLoan @entity {
#   "tx hash"
#   id: ID!
#   pool: Pool!
#   reserve: Reserve!
#   target: Bytes!
#   amount: BigInt!
#   totalFee: BigInt!
#   #protocolFee: BigInt!
#   initiator: User!
#   timestamp: Int!
# }
